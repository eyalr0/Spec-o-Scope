import numpy as np
from math import sqrt, isnan
from tqdm import tqdm
import itertools
from AES.softAES import AES
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import Rectangle
import seaborn as sns

KEY_COUNT = 1000
TEST_COUNT = 5

WITNESS_THRESHOLD = 70

def chunks(iterable, n):
	it = iter(iterable)
	while batch := tuple(itertools.islice(it, n)):
		yield batch

def get_round_key_bytes(rk):
	byte_list = []
	for i in range(4):
		word = rk[i]
		byte_list.append((word >> 24) & 0xff)
		byte_list.append((word >> 16) & 0xff)
		byte_list.append((word >> 8) & 0xff)
		byte_list.append((word >> 0) & 0xff)
	return byte_list



big_table = [[[1, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 3, 1, 3, 0, 2, 3, 0, 1, 1, 3, 2, 2, 1, 0, 0, 2, 2, 3, 1, 1, 2, 1, 3, 2, 0, 2, 3, 3, 1, 1, 3, 2, 1, 2, 2, 3, 3, 1, 2, 2, 1, 2, 1, 3, 1, 2, 0, 2, 3, 0, 0, 0, 3, 2, 2, 3, 1, 1, 0, 3, 3, 0, 2, 0, 2, 0, 1, 1, 2, 0, 2, 3, 1, 2, 1, 0, 1, 0, 3, 2, 1, 2, 0, 3, 1, 2, 1, 3, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 1, 2, 0, 0, 2, 2, 0, 2, 1, 1, 0, 3, 3, 0, 0, 0, 3, 0, 0, 1, 2, 3, 2, 3, 1, 1, 1, 2, 3, 2, 2, 3, 1, 0, 2, 2, 3, 2, 3, 0, 3, 0, 1, 0, 2, 0, 1, 2, 2, 1, 0, 2, 3, 2, 2, 2, 2, 3, 0, 0, 1, 1, 1, 3, 2, 0, 2, 2, 1, 1, 3, 3, 0, 3, 3, 3, 1, 3, 2, 3, 2, 0, 3, 2, 1, 3, 0, 0, 0, 3, 0, 1, 3, 3, 0, 3, 1, 1, 0, 1, 1, 3, 3, 2, 1, 3, 1, 2, 0, 3, 3, 2, 2, 3, 1, 2, 0, 1, 3, 3, 2, 3, 1, 2, 1, 0, 1, 1, 1, 3, 1, 3, 2, 0, 3, 0, 2, 0, 3, 0, 0, 3, 1, 1, 3, 1, 3], [3, 1, 0, 0, 2, 2, 3, 3, 0, 1, 3, 0, 3, 0, 0, 1, 2, 2, 3, 3, 0, 1, 1, 3, 2, 2, 1, 1, 2, 1, 3, 3, 3, 2, 1, 2, 3, 2, 0, 3, 3, 0, 1, 1, 1, 1, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1, 3, 2, 3, 0, 0, 2, 0, 0, 3, 1, 0, 1, 3, 0, 0, 2, 0, 3, 2, 3, 2, 1, 1, 1, 0, 3, 0, 3, 1, 3, 0, 1, 2, 2, 1, 3, 3, 2, 0, 3, 1, 1, 2, 0, 2, 0, 0, 1, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 3, 2, 3, 3, 1, 0, 2, 2, 0, 0, 0, 2, 2, 0, 3, 1, 2, 1, 0, 1, 1, 3, 1, 0, 3, 3, 0, 1, 2, 3, 1, 2, 3, 0, 2, 2, 2, 3, 2, 1, 2, 3, 3, 3, 1, 0, 1, 0, 3, 3, 3, 1, 2, 2, 0, 1, 1, 1, 2, 3, 0, 3, 1, 3, 3, 0, 2, 0, 2, 0, 0, 1, 2, 1, 2, 3, 2, 0, 3, 1, 2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 0, 3, 3, 2, 1, 3, 2, 2, 3, 1, 0, 1, 1, 2, 2, 0, 1, 3, 0, 3, 3, 2, 3, 0, 2, 1, 0, 1, 3, 3, 0, 3, 3, 3, 0, 1, 2, 1, 0, 2, 0, 3, 0, 0, 2, 0, 2, 1, 3, 0, 1, 2], [1, 1, 3, 2, 3, 3, 2, 2, 1, 3, 2, 0, 3, 3, 2, 2, 1, 1, 2, 3, 0, 0, 2, 3, 3, 2, 3, 3, 0, 3, 0, 1, 1, 1, 1, 3, 2, 0, 1, 2, 0, 2, 1, 1, 3, 2, 0, 2, 1, 0, 2, 2, 0, 3, 1, 0, 0, 0, 2, 2, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 0, 2, 2, 2, 0, 1, 0, 2, 0, 1, 3, 0, 2, 1, 2, 0, 1, 3, 0, 2, 3, 1, 2, 2, 0, 3, 1, 3, 3, 0, 2, 1, 2, 1, 3, 1, 0, 0, 1, 0, 3, 0, 2, 0, 3, 2, 1, 2, 1, 0, 0, 3, 1, 0, 0, 2, 2, 3, 2, 1, 2, 3, 2, 2, 3, 0, 1, 3, 1, 1, 3, 0, 1, 0, 1, 3, 0, 1, 1, 3, 3, 3, 1, 2, 3, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 2, 3, 0, 2, 1, 3, 3, 1, 3, 2, 1, 2, 2, 0, 2, 1, 1, 0, 3, 0, 2, 1, 1, 0, 3, 3, 3, 3, 3, 2, 0, 0, 3, 0, 2, 2, 0, 1, 3, 0, 0, 2, 1, 1, 3, 3, 0, 2, 1, 0, 1, 1, 0, 1, 1, 0, 0, 2, 1, 2, 2, 3, 0, 3, 0, 1, 0, 1, 2, 3, 1, 0, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 3, 2, 2, 1, 1, 1, 1], [2, 1, 2, 1, 1, 1, 1, 0, 3, 1, 1, 1, 3, 3, 1, 2, 1, 0, 0, 3, 1, 3, 2, 3, 1, 2, 1, 1, 2, 0, 1, 3, 2, 1, 0, 1, 1, 2, 2, 0, 1, 0, 0, 1, 1, 2, 2, 0, 1, 3, 1, 3, 3, 0, 2, 2, 0, 3, 1, 0, 2, 2, 1, 2, 0, 2, 3, 3, 3, 2, 1, 3, 1, 1, 3, 3, 3, 3, 2, 0, 2, 0, 0, 2, 2, 1, 3, 0, 3, 3, 1, 2, 1, 2, 1, 3, 0, 0, 0, 0, 2, 3, 1, 1, 3, 0, 3, 0, 3, 2, 1, 0, 1, 3, 2, 2, 3, 0, 1, 0, 2, 0, 3, 0, 0, 3, 2, 2, 0, 0, 3, 1, 0, 3, 0, 1, 0, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 3, 0, 2, 1, 1, 2, 0, 0, 2, 1, 3, 2, 0, 2, 3, 2, 2, 2, 2, 3, 1, 0, 2, 3, 2, 2, 2, 0, 0, 2, 1, 1, 2, 1, 0, 2, 2, 1, 3, 3, 3, 2, 0, 0, 1, 2, 0, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 3, 2, 1, 0, 2, 2, 0, 1, 3, 0, 1, 1, 0, 3, 1, 1, 1, 0, 0, 0, 0, 3, 3, 2, 3, 1, 3, 0, 3, 2, 1, 3, 3, 3, 0, 1, 3, 0, 1, 2, 0, 2, 3, 3, 2, 2, 1, 1]], [[0, 0, 1, 1, 1, 1, 3, 0, 1, 3, 3, 2, 0, 2, 1, 3, 2, 1, 0, 0, 2, 3, 3, 0, 1, 1, 3, 3, 2, 0, 0, 3, 0, 2, 3, 1, 3, 2, 2, 0, 0, 2, 3, 0, 3, 3, 2, 2, 0, 3, 3, 0, 3, 0, 2, 0, 3, 1, 3, 2, 1, 1, 1, 2, 3, 3, 2, 0, 0, 1, 2, 2, 1, 3, 1, 3, 1, 0, 0, 3, 1, 3, 2, 0, 3, 0, 1, 0, 1, 2, 3, 0, 3, 1, 2, 0, 3, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0, 3, 1, 1, 3, 3, 1, 3, 0, 0, 1, 2, 2, 1, 1, 1, 2, 1, 1, 0, 3, 2, 3, 2, 0, 0, 0, 3, 2, 3, 3, 2, 0, 1, 3, 3, 2, 3, 2, 1, 2, 1, 0, 1, 3, 1, 0, 3, 3, 0, 1, 3, 2, 3, 3, 3, 3, 2, 1, 1, 0, 0, 0, 2, 3, 1, 3, 3, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 3, 2, 3, 1, 2, 3, 0, 2, 1, 1, 1, 2, 1, 0, 2, 2, 1, 2, 0, 0, 1, 0, 0, 2, 2, 3, 0, 2, 0, 3, 1, 2, 2, 3, 3, 2, 0, 3, 1, 0, 2, 2, 3, 2, 0, 3, 0, 1, 0, 0, 0, 2, 0, 2, 3, 1, 2, 1, 3, 1, 2, 1, 1, 2, 0, 0, 2, 0, 2], [2, 0, 1, 1, 3, 3, 2, 2, 1, 0, 2, 1, 2, 1, 1, 0, 3, 3, 2, 2, 1, 0, 0, 2, 3, 3, 0, 0, 3, 0, 2, 2, 2, 3, 0, 3, 2, 3, 1, 2, 2, 1, 0, 0, 0, 0, 3, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 3, 2, 1, 1, 3, 1, 1, 2, 0, 1, 0, 2, 1, 1, 3, 1, 2, 3, 2, 3, 0, 0, 0, 1, 2, 1, 2, 0, 2, 1, 0, 3, 3, 0, 2, 2, 3, 1, 2, 0, 0, 3, 1, 3, 1, 1, 0, 1, 3, 3, 1, 1, 0, 0, 1, 1, 0, 2, 3, 2, 2, 0, 1, 3, 3, 1, 1, 1, 3, 3, 1, 2, 0, 3, 0, 1, 0, 0, 2, 0, 1, 2, 2, 1, 0, 3, 2, 0, 3, 2, 1, 3, 3, 3, 2, 3, 0, 3, 2, 2, 2, 0, 1, 0, 1, 2, 2, 2, 0, 3, 3, 1, 0, 0, 0, 3, 2, 1, 2, 0, 2, 2, 1, 3, 1, 3, 1, 1, 0, 3, 0, 3, 2, 3, 1, 2, 0, 3, 3, 3, 1, 3, 3, 0, 3, 3, 3, 1, 2, 2, 3, 0, 2, 3, 3, 2, 0, 1, 0, 0, 3, 3, 1, 0, 2, 1, 2, 2, 3, 2, 1, 3, 0, 1, 0, 2, 2, 1, 2, 2, 2, 1, 0, 3, 0, 1, 3, 1, 2, 1, 1, 3, 1, 3, 0, 2, 1, 0, 3], [0, 0, 2, 3, 2, 2, 3, 3, 0, 2, 3, 1, 2, 2, 3, 3, 0, 0, 3, 2, 1, 1, 3, 2, 2, 3, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 3, 1, 0, 3, 1, 3, 0, 0, 2, 3, 1, 3, 0, 1, 3, 3, 1, 2, 0, 1, 1, 1, 3, 3, 2, 3, 3, 0, 1, 3, 2, 3, 2, 2, 1, 3, 3, 3, 1, 0, 1, 3, 1, 0, 2, 1, 3, 0, 3, 1, 0, 2, 1, 3, 2, 0, 3, 3, 1, 2, 0, 2, 2, 1, 3, 0, 3, 0, 2, 0, 1, 1, 0, 1, 2, 1, 3, 1, 2, 3, 0, 3, 0, 1, 1, 2, 0, 1, 1, 3, 3, 2, 3, 0, 3, 2, 3, 3, 2, 1, 0, 2, 0, 0, 2, 1, 0, 1, 0, 2, 1, 0, 0, 2, 2, 2, 0, 3, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 3, 2, 1, 3, 0, 2, 2, 0, 2, 3, 0, 3, 3, 1, 3, 0, 0, 1, 2, 1, 3, 0, 0, 1, 2, 2, 2, 2, 2, 3, 1, 1, 2, 1, 3, 3, 1, 0, 2, 1, 1, 3, 0, 0, 2, 2, 1, 3, 0, 1, 0, 0, 1, 0, 0, 1, 1, 3, 0, 3, 3, 2, 1, 2, 1, 0, 1, 0, 3, 2, 0, 1, 3, 3, 1, 1, 0, 0, 1, 3, 0, 0, 2, 3, 3, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 1, 2, 0, 0, 0, 2, 2, 0, 3, 0, 1, 1, 2, 0, 2, 3, 2, 0, 3, 0, 0, 3, 1, 0, 2, 3, 0, 1, 0, 0, 3, 3, 1, 0, 1, 1, 0, 0, 3, 3, 1, 0, 2, 0, 2, 2, 1, 3, 3, 1, 2, 0, 1, 3, 3, 0, 3, 1, 3, 2, 2, 2, 3, 0, 2, 0, 0, 2, 2, 2, 2, 3, 1, 3, 1, 1, 3, 3, 0, 2, 1, 2, 2, 0, 3, 0, 3, 0, 2, 1, 1, 1, 1, 3, 2, 0, 0, 2, 1, 2, 1, 2, 3, 0, 1, 0, 2, 3, 3, 2, 1, 0, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 1, 2, 0, 1, 2, 1, 0, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 3, 1, 1, 0, 2, 1, 3, 0, 0, 3, 1, 1, 3, 0, 2, 3, 1, 3, 2, 3, 3, 3, 3, 2, 0, 1, 3, 2, 3, 3, 3, 1, 1, 3, 0, 0, 3, 0, 1, 3, 3, 0, 2, 2, 2, 3, 1, 1, 0, 3, 1, 3, 0, 3, 2, 2, 2, 3, 2, 0, 2, 2, 3, 0, 1, 3, 3, 1, 0, 2, 1, 0, 0, 1, 2, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 2, 0, 2, 1, 2, 3, 0, 2, 2, 2, 1, 0, 2, 1, 0, 3, 1, 3, 2, 2, 3, 3, 0, 0]], [[3, 3, 2, 2, 2, 2, 0, 3, 2, 0, 0, 1, 3, 1, 2, 0, 1, 2, 3, 3, 1, 0, 0, 3, 2, 2, 0, 0, 1, 3, 3, 0, 3, 1, 0, 2, 0, 1, 1, 3, 3, 1, 0, 3, 0, 0, 1, 1, 3, 0, 0, 3, 0, 3, 1, 3, 0, 2, 0, 1, 2, 2, 2, 1, 0, 0, 1, 3, 3, 2, 1, 1, 2, 0, 2, 0, 2, 3, 3, 0, 2, 0, 1, 3, 0, 3, 2, 3, 2, 1, 0, 3, 0, 2, 1, 3, 0, 3, 1, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 3, 0, 2, 2, 0, 0, 2, 0, 3, 3, 2, 1, 1, 2, 2, 2, 1, 2, 2, 3, 0, 1, 0, 1, 3, 3, 3, 0, 1, 0, 0, 1, 3, 2, 0, 0, 1, 0, 1, 2, 1, 2, 3, 2, 0, 2, 3, 0, 0, 3, 2, 0, 1, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 1, 0, 2, 0, 0, 3, 3, 1, 1, 2, 1, 1, 1, 3, 1, 0, 1, 0, 2, 1, 0, 3, 1, 2, 2, 2, 1, 2, 3, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 1, 0, 3, 1, 3, 0, 2, 1, 1, 0, 0, 1, 3, 0, 2, 3, 1, 1, 0, 1, 3, 0, 3, 2, 3, 3, 3, 1, 3, 1, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 3, 3, 1, 3, 1], [1, 3, 2, 2, 0, 0, 1, 1, 2, 3, 1, 2, 1, 2, 2, 3, 0, 0, 1, 1, 2, 3, 3, 1, 0, 0, 3, 3, 0, 3, 1, 1, 1, 0, 3, 0, 1, 0, 2, 1, 1, 2, 3, 3, 3, 3, 0, 2, 3, 3, 1, 3, 3, 3, 2, 3, 1, 0, 1, 2, 2, 0, 2, 2, 1, 3, 2, 3, 1, 2, 2, 0, 2, 1, 0, 1, 0, 3, 3, 3, 2, 1, 2, 1, 3, 1, 2, 3, 0, 0, 3, 1, 1, 0, 2, 1, 3, 3, 0, 2, 0, 2, 2, 3, 2, 0, 0, 2, 2, 3, 3, 2, 2, 3, 1, 0, 1, 1, 3, 2, 0, 0, 2, 2, 2, 0, 0, 2, 1, 3, 0, 3, 2, 3, 3, 1, 3, 2, 1, 1, 2, 3, 0, 1, 3, 0, 1, 2, 0, 0, 0, 1, 0, 3, 0, 1, 1, 1, 3, 2, 3, 2, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 0, 1, 2, 1, 3, 1, 1, 2, 0, 2, 0, 2, 2, 3, 0, 3, 0, 1, 0, 2, 1, 3, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 2, 1, 1, 0, 3, 1, 0, 0, 1, 3, 2, 3, 3, 0, 0, 2, 3, 1, 2, 1, 1, 0, 1, 2, 0, 3, 2, 3, 1, 1, 2, 1, 1, 1, 2, 3, 0, 3, 2, 0, 2, 1, 2, 2, 0, 2, 0, 3, 1, 2, 3, 0], [3, 3, 1, 0, 1, 1, 0, 0, 3, 1, 0, 2, 1, 1, 0, 0, 3, 3, 0, 1, 2, 2, 0, 1, 1, 0, 1, 1, 2, 1, 2, 3, 3, 3, 3, 1, 0, 2, 3, 0, 2, 0, 3, 3, 1, 0, 2, 0, 3, 2, 0, 0, 2, 1, 3, 2, 2, 2, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 1, 1, 2, 0, 0, 0, 2, 3, 2, 0, 2, 3, 1, 2, 0, 3, 0, 2, 3, 1, 2, 0, 1, 3, 0, 0, 2, 1, 3, 1, 1, 2, 0, 3, 0, 3, 1, 3, 2, 2, 3, 2, 1, 2, 0, 2, 1, 0, 3, 0, 3, 2, 2, 1, 3, 2, 2, 0, 0, 1, 0, 3, 0, 1, 0, 0, 1, 2, 3, 1, 3, 3, 1, 2, 3, 2, 3, 1, 2, 3, 3, 1, 1, 1, 3, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 0, 1, 2, 0, 3, 1, 1, 3, 1, 0, 3, 0, 0, 2, 0, 3, 3, 2, 1, 2, 0, 3, 3, 2, 1, 1, 1, 1, 1, 0, 2, 2, 1, 2, 0, 0, 2, 3, 1, 2, 2, 0, 3, 3, 1, 1, 2, 0, 3, 2, 3, 3, 2, 3, 3, 2, 2, 0, 3, 0, 0, 1, 2, 1, 2, 3, 2, 3, 0, 1, 3, 2, 0, 0, 2, 2, 3, 3, 2, 0, 3, 3, 1, 0, 0, 3, 3, 3, 3], [0, 3, 0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 1, 1, 3, 0, 3, 2, 2, 1, 3, 1, 0, 1, 3, 0, 3, 3, 0, 2, 3, 1, 0, 3, 2, 3, 3, 0, 0, 2, 3, 2, 2, 3, 3, 0, 0, 2, 3, 1, 3, 1, 1, 2, 0, 0, 2, 1, 3, 2, 0, 0, 3, 0, 2, 0, 1, 1, 1, 0, 3, 1, 3, 3, 1, 1, 1, 1, 0, 2, 0, 2, 2, 0, 0, 3, 1, 2, 1, 1, 3, 0, 3, 0, 3, 1, 2, 2, 2, 2, 0, 1, 3, 3, 1, 2, 1, 2, 1, 0, 3, 2, 3, 1, 0, 0, 1, 2, 3, 2, 0, 2, 1, 2, 2, 1, 0, 0, 2, 2, 1, 3, 2, 1, 2, 3, 2, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 2, 2, 3, 1, 2, 0, 3, 3, 0, 2, 2, 0, 3, 1, 0, 2, 0, 1, 0, 0, 0, 0, 1, 3, 2, 0, 1, 0, 0, 0, 2, 2, 0, 3, 3, 0, 3, 2, 0, 0, 3, 1, 1, 1, 0, 2, 2, 3, 0, 2, 0, 3, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 3, 2, 0, 0, 2, 3, 1, 2, 3, 3, 2, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1, 0, 1, 3, 1, 2, 1, 0, 3, 1, 1, 1, 2, 3, 1, 2, 3, 0, 2, 0, 1, 1, 0, 0, 3, 3]], [[2, 2, 3, 3, 3, 3, 1, 2, 3, 1, 1, 0, 2, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 2, 3, 3, 1, 1, 0, 2, 2, 1, 2, 0, 1, 3, 1, 0, 0, 2, 2, 0, 1, 2, 1, 1, 0, 0, 2, 1, 1, 2, 1, 2, 0, 2, 1, 3, 1, 0, 3, 3, 3, 0, 1, 1, 0, 2, 2, 3, 0, 0, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 0, 2, 1, 2, 3, 2, 3, 0, 1, 2, 1, 3, 0, 2, 1, 2, 0, 3, 3, 3, 3, 2, 0, 3, 3, 3, 3, 2, 1, 3, 3, 1, 1, 3, 1, 2, 2, 3, 0, 0, 3, 3, 3, 0, 3, 3, 2, 1, 0, 1, 0, 2, 2, 2, 1, 0, 1, 1, 0, 2, 3, 1, 1, 0, 1, 0, 3, 0, 3, 2, 3, 1, 3, 2, 1, 1, 2, 3, 1, 0, 1, 1, 1, 1, 0, 3, 3, 2, 2, 2, 0, 1, 3, 1, 1, 2, 2, 0, 0, 3, 0, 0, 0, 2, 0, 1, 0, 1, 3, 0, 1, 2, 0, 3, 3, 3, 0, 3, 2, 0, 0, 3, 0, 2, 2, 3, 2, 2, 0, 0, 1, 2, 0, 2, 1, 3, 0, 0, 1, 1, 0, 2, 1, 3, 2, 0, 0, 1, 0, 2, 1, 2, 3, 2, 2, 2, 0, 2, 0, 1, 3, 0, 3, 1, 3, 0, 3, 3, 0, 2, 2, 0, 2, 0], [0, 2, 3, 3, 1, 1, 0, 0, 3, 2, 0, 3, 0, 3, 3, 2, 1, 1, 0, 0, 3, 2, 2, 0, 1, 1, 2, 2, 1, 2, 0, 0, 0, 1, 2, 1, 0, 1, 3, 0, 0, 3, 2, 2, 2, 2, 1, 3, 2, 2, 0, 2, 2, 2, 3, 2, 0, 1, 0, 3, 3, 1, 3, 3, 0, 2, 3, 2, 0, 3, 3, 1, 3, 0, 1, 0, 1, 2, 2, 2, 3, 0, 3, 0, 2, 0, 3, 2, 1, 1, 2, 0, 0, 1, 3, 0, 2, 2, 1, 3, 1, 3, 3, 2, 3, 1, 1, 3, 3, 2, 2, 3, 3, 2, 0, 1, 0, 0, 2, 3, 1, 1, 3, 3, 3, 1, 1, 3, 0, 2, 1, 2, 3, 2, 2, 0, 2, 3, 0, 0, 3, 2, 1, 0, 2, 1, 0, 3, 1, 1, 1, 0, 1, 2, 1, 0, 0, 0, 2, 3, 2, 3, 0, 0, 0, 2, 1, 1, 3, 2, 2, 2, 1, 0, 3, 0, 2, 0, 0, 3, 1, 3, 1, 3, 3, 2, 1, 2, 1, 0, 1, 3, 0, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 3, 0, 0, 1, 2, 0, 1, 1, 0, 2, 3, 2, 2, 1, 1, 3, 2, 0, 3, 0, 0, 1, 0, 3, 1, 2, 3, 2, 0, 0, 3, 0, 0, 0, 3, 2, 1, 2, 3, 1, 3, 0, 3, 3, 1, 3, 1, 2, 0, 3, 2, 1], [2, 2, 0, 1, 0, 0, 1, 1, 2, 0, 1, 3, 0, 0, 1, 1, 2, 2, 1, 0, 3, 3, 1, 0, 0, 1, 0, 0, 3, 0, 3, 2, 2, 2, 2, 0, 1, 3, 2, 1, 3, 1, 2, 2, 0, 1, 3, 1, 2, 3, 1, 1, 3, 0, 2, 3, 3, 3, 1, 1, 0, 1, 1, 2, 3, 1, 0, 1, 0, 0, 3, 1, 1, 1, 3, 2, 3, 1, 3, 2, 0, 3, 1, 2, 1, 3, 2, 0, 3, 1, 0, 2, 1, 1, 3, 0, 2, 0, 0, 3, 1, 2, 1, 2, 0, 2, 3, 3, 2, 3, 0, 3, 1, 3, 0, 1, 2, 1, 2, 3, 3, 0, 2, 3, 3, 1, 1, 0, 1, 2, 1, 0, 1, 1, 0, 3, 2, 0, 2, 2, 0, 3, 2, 3, 2, 0, 3, 2, 2, 0, 0, 0, 2, 1, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 3, 1, 0, 3, 1, 2, 0, 0, 2, 0, 1, 2, 1, 1, 3, 1, 2, 2, 3, 0, 3, 1, 2, 2, 3, 0, 0, 0, 0, 0, 1, 3, 3, 0, 3, 1, 1, 3, 2, 0, 3, 3, 1, 2, 2, 0, 0, 3, 1, 2, 3, 2, 2, 3, 2, 2, 3, 3, 1, 2, 1, 1, 0, 3, 0, 3, 2, 3, 2, 1, 0, 2, 3, 1, 1, 3, 3, 2, 2, 3, 1, 2, 2, 0, 1, 1, 2, 2, 2, 2], [1, 2, 1, 2, 2, 2, 2, 3, 0, 2, 2, 2, 0, 0, 2, 1, 2, 3, 3, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 3, 2, 0, 1, 2, 3, 2, 2, 1, 1, 3, 2, 3, 3, 2, 2, 1, 1, 3, 2, 0, 2, 0, 0, 3, 1, 1, 3, 0, 2, 3, 1, 1, 2, 1, 3, 1, 0, 0, 0, 1, 2, 0, 2, 2, 0, 0, 0, 0, 1, 3, 1, 3, 3, 1, 1, 2, 0, 3, 0, 0, 2, 1, 2, 1, 2, 0, 3, 3, 3, 3, 1, 0, 2, 2, 0, 3, 0, 3, 0, 1, 2, 3, 2, 0, 1, 1, 0, 3, 2, 3, 1, 3, 0, 3, 3, 0, 1, 1, 3, 3, 0, 2, 3, 0, 3, 2, 3, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 1, 3, 3, 2, 0, 3, 1, 2, 2, 1, 3, 3, 1, 2, 0, 1, 3, 1, 0, 1, 1, 1, 1, 0, 2, 3, 1, 0, 1, 1, 1, 3, 3, 1, 2, 2, 1, 2, 3, 1, 1, 2, 0, 0, 0, 1, 3, 3, 2, 1, 3, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0, 0, 1, 2, 3, 1, 1, 3, 2, 0, 3, 2, 2, 3, 0, 2, 2, 2, 3, 3, 3, 3, 0, 0, 1, 0, 2, 0, 3, 0, 1, 2, 0, 0, 0, 3, 2, 0, 3, 2, 1, 3, 1, 0, 0, 1, 1, 2, 2]]]

def get_round_key_bytes(rk):
    byte_list = []
    for i in range(4):
        word = rk[i]
        byte_list.append((word >> 24) & 0xff)
        byte_list.append((word >> 16) & 0xff)
        byte_list.append((word >> 8) & 0xff)
        byte_list.append((word >> 0) & 0xff)
    return byte_list

def is_witness(key, ct, line=0):
    rk = get_round_key_bytes(AES(key)._Kd[0])
    for i in range(16):
        if (ct[i] >> 6) ^ line == rk[i] >> 6:
            return False
    return True
  
def is_sr_witness(key, ct, line=0):
    if not is_witness(key, ct, line=line):
      return False
    
    cs = AES(key)
    _, states, _ = cs.decrypt_debug2(ct)
    st = get_round_key_bytes(states[1])
    for i in range(16):
        if st[i] >> 6 == line:
            return False
    return True

def fast_pearson(x, y):
    x = np.array(x)
    y = np.array(y)
    xv = x - x.mean(axis=0)
    yv = y - y.mean(axis=0)
    xvss = (xv * xv).sum(axis=0)
    yvss = (yv * yv).sum(axis=0)
    result = np.matmul(xv.transpose(), yv) / np.sqrt(np.outer(xvss, yvss))
    return np.maximum(np.minimum(result, 1.0), -1.0)[0][0]

def true_sample(x):
  y = x % 10 + (x // 10) * 20
  if x % 10 == 0:
    y -= 5
  return y

if __name__ == '__main__':
	filename = "paper_expr/sbox_sr.txt"
	REPEAT = 1

	samples = []
	with open(filename, 'r') as f:
		for chunk in tqdm(chunks(f.readlines(), TEST_COUNT * 1024 * REPEAT)):
			assert(len(chunk) == TEST_COUNT * 1024 * REPEAT)
			key = None
			key_data = []
			for chunk2 in chunks(chunk, 1024 * REPEAT):
				data = []
				for line in chunk2:
					parts = line[:-1].split(',')
					cur_key = bytes.fromhex(parts[0])
					if key is None:
						key = cur_key
					else:
						assert(key == cur_key)
					ct = bytes.fromhex(parts[1])
					a1, a2 = int(parts[2]), int(parts[3])

					if a1 == -1:
						a1 = 0
						a2 = 0
					if a2 == -1:
						# a2 = a1 + 50 # NOTE: Treat no access as late access
						a1 = 0
						a2 = 0

					if False and (a1 % 10 == 0 or a2 % 10 == 0):
						# Discard traces which landed in the overhead window
						continue
						# a1 = 0
						# a2 = 0

					a1 = true_sample(a1)
					a2 = true_sample(a2)
					data.append((ct, a2 - a1))
				
				# print(f'discarded {TEST_COUNT - len(data)}')
				key_data.append(data)
			samples.append((key, key_data))
	assert(len(samples) == KEY_COUNT)


	orig_key, kd = samples[0]
	key0 = get_round_key_bytes(AES(orig_key)._Kd[0])
	full_data = kd[0]
	assert(is_sr_witness(orig_key, full_data[0][0]))

	bi = 0
	key_msb = key0[bi]&0xC0
	true_lsb = key0[bi]&0b111111
	print(f'{bi=:x} {key_msb=:02x} {true_lsb=:02x}')

	ct_data = []
	for j in range(REPEAT):
		ct_data.append(full_data[1024*j+bi*64:1024*j+bi*64+64])

	# succ = 0
	# witnesses = 0
	# false_pos = 0
	# false_neg = 0
	# for ct, t in ct_data:
	# 	wit = is_sr_witness(orig_key, ct)
	# 	clas = (t >= WITNESS_THRESHOLD)
	# 	if wit:
	# 		witnesses += 1
	# 	if wit == clas:
	# 		succ += 1
	# 	if clas and not wit:
	# 		false_pos += 1
	# 	if not clas and wit:
	# 		false_neg += 1
	# print(f'Success: {succ}/64 [{100*succ/64:.2f}%], Witnesses: {witnesses}/64 [{100*witnesses/64:.2f}%]')
	# print('False Pos', false_pos, '\t False Neg', false_neg)


	def oracle(x):
		return int(x[1] >= WITNESS_THRESHOLD)
	
	if REPEAT > 1:
		measurement = [int(sum(oracle(y) for y in x)>1) for x in zip(*ct_data)]
	else:
		measurement = [oracle(x) for x in ct_data[0]]
	# measurement = [x[1] for x in ct_data]

	check_result = [0]*(256*64)
	cr_idx = 0
	mx_d = None
	mx_v = None
	for st in range(256):
		st0 = (st >> 0) & 0b11
		st1 = (st >> 2) & 0b11
		st2 = (st >> 4) & 0b11
		st3 = (st >> 6) & 0b11
		t0 = big_table[st0][0]
		t1 = big_table[st1][1]
		t2 = big_table[st2][2]
		t3 = big_table[st3][3]
		pred = [0]*64
		for lsb in range(64):
			key_guess = (key_msb | lsb)
			for j in range(64):
				p0 = key_guess ^ ct_data[0][j][0][bi]
				# print(f'{lsb=:02x} {st=:02x} {j=} {p0=:02x}')
				a0 = t0[p0]
				a1 = t1[p0]
				a2 = t2[p0]
				a3 = t3[p0]
				pred[j] = int((a0 == 0) or (a1 == 0) or (a2 == 0) or (a3 == 0))

			pearson = abs(fast_pearson(measurement, pred))
			check_result[cr_idx] = pearson
			cr_idx += 1
			if isnan(pearson):
				continue
			if mx_d is None or mx_v < pearson:
				mx_d = lsb
				mx_v = pearson

	print(f'lsb={mx_d:02x} pearson={mx_v:.3f} correct={mx_d == true_lsb}')



	maximum = max(check_result)
	max_index = check_result.index(maximum)
	keyvalue = int(max_index/ 256)

	rect = patches.Rectangle((max_index, maximum), 40, 30, linewidth=1, edgecolor='r', facecolor='none')
	x_axis = np.arange(16384)
	x_axis2 = np.arange(keyvalue * 256, (keyvalue+1)*256+1)
	plt.figure(figsize=(8,3))
	plt.scatter(x_axis, check_result, s = 0.6, color="lightblue")
	plt.scatter(x_axis2, check_result[keyvalue * 256 : (keyvalue+1)*256+1], marker="x", s=0.6, color="#FF00FF")

	plt.xticks(np.arange(0,16384,256), list(np.arange(0,64,1)), rotation=70, fontsize=7)
	plt.xlabel("6 LSBs of the key byte", fontsize=8)
	plt.ylabel("Pearson Correlation", fontsize=8)

	ax=plt.gca()
	rect = patches.Rectangle((max_index - 250, maximum - 0.025), 500, 0.05, linewidth=0.5, edgecolor='r', facecolor='none')
	ax.add_patch(rect)

	plt.tight_layout()

	plt.savefig("paper_expr/sbox_sr_pearson.png")

